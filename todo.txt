Program name pipex
Turn in files Makefile, *.h, *.c
Makefile NAME, all, clean, fclean, re
Arguments file1 cmd1 cmd2 file2
External functs.
• open, close, read, write,
malloc, free, perror,
strerror, access, dup, dup2,
execve, exit, fork, pipe,
unlink, wait, waitpid
• ft_printf and any equivalent
YOU coded
Libft authorized Yes

Description
This project is about handling pipes.
Your program will be executed as follows:
./pipex file1 cmd1 cmd2 file2

It must take 4 arguments:
• file1 and file2 are file names.
• cmd1 and cmd2 are shell commands with their parameters.

It must behave exactly the same as the shell command below:
$> < file1 cmd1 | cmd2 > file2

III.1 Examples
$> ./pipex infile "ls -l" "wc -l" outfile
Should behave like: < infile ls -l | wc -l > outfile
$> ./pipex infile "grep a1" "wc -w" outfile
Should behave like: < infile grep a1 | wc -w > outfile

III.2 Requirements
Your project must comply with the following rules:
• You have to turn in a Makefile which will compile your source files. It must not
relink.
• You have to handle errors thoroughly. In no way your program should quit unex-
pectedly (segmentation fault, bus error, double free, and so forth).
• Your program mustn’t have memory leaks.
• If you have any doubt, handle the errors like the shell command:
< file1 cmd1 | cmd2 > file2

Bonus part
You will get extra points if you:
• Handle multiple pipes.
This:
$> ./pipex file1 cmd1 cmd2 cmd3 ... cmdn file2
Should behave like:
< file1 cmd1 | cmd2 | cmd3 ... | cmdn > file2
• Support « and » when the first parameter is "here_doc".
This:
$> ./pipex here_doc LIMITER cmd cmd1 file
Should behave like:
cmd << LIMITER | cmd1 >> file

-----

minha libft vai ter certas funcoes auxiliares com o mesmo nome
->mudar o nome das auxiliares dentro do printf e getnext

-----

nao ta a dizer nada sobre variaveis globais serem proibidas
preciso de usar o environ da <unistd.h>

->questoes do PATH:
. "/usr/bin/which"
. retorno do comando "which"

-> colocar varias mensagens de erro caso os comandos ou file names
estejam mal escritos e dem erro
tipo "Command "%s" does not exist or is not working\n"
ou "File "%s" does not exist ou has access problems\n"
se possivel, usar logo exit(0) nos errors
(garantir que tenho todos os frees dados ate esse momento)


----
. proc bonus
. erros e frees
resolver conflitos do libft
-> ja mudei o nome das funcoes do get_next
-> falta mudar itoa e strlen do printf

. make pipe loop bonus (acho que ta)
. proc all (parece estar)
. (STDIN e STDOUT library)
. (last cmd flags)
. (erros, first cmd, etc)
----

testing

----

. valgrind
. norminette
. Makefile
. readme e .vscode?